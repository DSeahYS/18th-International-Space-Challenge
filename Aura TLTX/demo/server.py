from flask import Flask, request, send_from_directory
from flask_cors import CORS
import time
import random
import logging
import os

# Configure logging with AURA Live-TX theme
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [üåå AURA Live-TX] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

app = Flask(__name__)
CORS(app)  # Enable CORS for demo purposes

# Mock translation data - English to selected languages
MOCK_TRANSLATIONS = {
    'es': {
        'Hello, world!': '¬°Hola, mundo!',
        'How are you?': '¬øC√≥mo est√°s?',
        'Thank you.': 'Gracias.',
        'This is a test.': 'Esto es una prueba.',
        'Welcome to the future.': 'Bienvenido al futuro.'
    },
    'fr': {
        'Hello, world!': 'Bonjour, le monde !',
        'How are you?': 'Comment allez-vous ?',
        'Thank you.': 'Merci.',
        'This is a test.': 'Ceci est un test.',
        'Welcome to the future.': 'Bienvenue dans le futur.'
    },
    'de': {
        'Hello, world!': 'Hallo, Welt!',
        'How are you?': 'Wie geht es dir?',
        'Thank you.': 'Danke.',
        'This is a test.': 'Das ist ein Test.',
        'Welcome to the future.': 'Willkommen in der Zukunft.'
    },
    'ja': {
        'Hello, world!': '„Åì„Çì„Å´„Å°„ÅØ„ÄÅ‰∏ñÁïåÔºÅ',
        'How are you?': '„ÅäÂÖÉÊ∞ó„Åß„Åô„ÅãÔºü',
        'Thank you.': '„ÅÇ„Çä„Åå„Å®„ÅÜ„ÄÇ',
        'This is a test.': '„Åì„Çå„ÅØ„ÉÜ„Çπ„Éà„Åß„Åô„ÄÇ',
        'Welcome to the future.': 'Êú™Êù•„Å∏„Çà„ÅÜ„Åì„Åù„ÄÇ'
    },
    'zh': {
        'Hello, world!': '‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ',
        'How are you?': '‰Ω†ÊÄé‰πàÊ†∑Ôºü',
        'Thank you.': 'Ë∞¢Ë∞¢„ÄÇ',
        'This is a test.': 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØï„ÄÇ',
        'Welcome to the future.': 'Ê¨¢ËøéÊù•Âà∞Êú™Êù•„ÄÇ'
    },
    'ru': {
        # Full demo sentences
        'Houston, we have a problem with the coffee machine!': '–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ—Ñ–µ–º–∞—à–∏–Ω–æ–π!',
        'Roger that, astronaut. What\'s the status?': '–ü—Ä–∏–Ω—è—Ç–æ, –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç. –ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å?',
        'The aliens stole my sandwich again.': '–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ —Å–Ω–æ–≤–∞ —É–∫—Ä–∞–ª–∏ –º–æ–π —Å—ç–Ω–¥–≤–∏—á.',
        'Copy, we\'ll send backup... and more sandwiches.': '–ü—Ä–∏–Ω—è—Ç–æ, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ... –∏ –±–æ–ª—å—à–µ —Å—ç–Ω–¥–≤–∏—á–µ–π.',
        # Individual words and phrases
        'Roger': '–†–æ–¥–∂–µ—Ä',
        'that': '—Ç–æ',
        'astronaut': '–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç',
        'What\'s': '–ß—Ç–æ',
        'the': '',
        'status': '—Å—Ç–∞—Ç—É—Å',
        'Houston': '–•—å—é—Å—Ç–æ–Ω',
        'we': '–º—ã',
        'have': '–µ—Å—Ç—å',
        'a': '',
        'problem': '–ø—Ä–æ–±–ª–µ–º–∞',
        'with': '—Å',
        'coffee': '–∫–æ—Ñ–µ',
        'machine': '–º–∞—à–∏–Ω–æ–π',
        'aliens': '–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ',
        'stole': '—É–∫—Ä–∞–ª–∏',
        'my': '–º–æ–π',
        'sandwich': '—Å—ç–Ω–¥–≤–∏—á',
        'again': '—Å–Ω–æ–≤–∞',
        'Copy': '–ü—Ä–∏–Ω—è—Ç–æ',
        'we\'ll': '–º—ã',
        'send': '–æ—Ç–ø—Ä–∞–≤–∏–º',
        'backup': '–ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ',
        'and': '–∏',
        'more': '–±–æ–ª—å—à–µ',
        'sandwiches': '—Å—ç–Ω–¥–≤–∏—á–∏',
        # Words with punctuation
        'Houston,': '–•—å—é—Å—Ç–æ–Ω,',
        'machine!': '–º–∞—à–∏–Ω–æ–π!',
        'that,': '—Ç–æ,',
        'astronaut.': '–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç.',
        'again.': '—Å–Ω–æ–≤–∞.',
        'Copy,': '–ü—Ä–∏–Ω—è—Ç–æ,',
        'backup...': '–ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ...',
        'sandwiches.': '—Å—ç–Ω–¥–≤–∏—á–∏.',
        'The': '',
        # Punctuation
        '!': '!',
        ',': ',',
        '.': '.',
        '?': '?',
        '...': '...'
    }
}

@app.route('/')
def serve_index():
    """Serve the main demo page"""
    logging.info("üöÄ Serving index.html from the orbital station")
    return send_from_directory(os.path.dirname(__file__), 'index.html')

@app.route('/styles.css')
def serve_styles():
    """Serve the CSS file"""
    return send_from_directory(os.path.dirname(__file__), 'styles.css')

@app.route('/script.js')
def serve_script():
    """Serve the JavaScript file"""
    return send_from_directory(os.path.dirname(__file__), 'script.js')

@app.route('/translate', methods=['POST'])
def translate():
    """Mock translation endpoint with futuristic processing simulation"""
    try:
        data = request.get_json()
        if not data:
            logging.warning("‚ö†Ô∏è  No data received in translation request")
            return {'error': 'No data provided', 'status': 'Mission aborted'}, 400

        text = data.get('text', '').strip()
        target_lang = data.get('target_lang', '').strip()

        if not text:
            logging.warning("‚ö†Ô∏è  Empty text received for translation")
            return {'error': 'Text is required', 'status': 'Mission parameters incomplete'}, 400

        if not target_lang:
            logging.warning("‚ö†Ô∏è  No target language specified")
            return {'error': 'Target language is required', 'status': 'Destination coordinates missing'}, 400

        logging.info(f"üåå Initiating hyperspace translation protocol: EN ‚Üí {target_lang.upper()}")
        logging.info(f"üì° Source text: '{text}'")

        # Simulate AI processing delay (0.1-0.3 seconds)
        processing_time = random.uniform(0.1, 0.3)
        logging.info(f"‚ö° Quantum processors engaging... Estimated time: {processing_time:.1f}s")
        time.sleep(processing_time)

        # Get mock translation
        lang_translations = MOCK_TRANSLATIONS.get(target_lang, {})
        translated_text = lang_translations.get(text, text)  # Fallback to original text if no translation

        logging.info(f"‚úÖ Translation complete! Output: '{translated_text}'")
        logging.info(f"‚è±Ô∏è  Processing time: {processing_time:.2f} seconds")

        return {
            'translated_text': translated_text,
            'status': 'Hyperspace translation protocol executed successfully',
            'processing_time': f"{processing_time:.2f} seconds",
            'cosmic_signature': 'Powered by Quantum Translation Matrix v2.0',
            'target_language': target_lang,
            'confidence_score': round(random.uniform(0.85, 0.99), 2)
        }

    except Exception as e:
        logging.error(f"üí• Translation matrix failure: {str(e)}")
        return {
            'error': 'Translation failed',
            'status': 'Emergency protocol activated',
            'cosmic_signature': 'Error logged in quantum database'
        }, 500

if __name__ == '__main__':
    logging.info("üåü Flask server initializing in demo mode")
    logging.info("üöÄ Ready for interstellar communication")
    app.run(debug=True, host='0.0.0.0', port=5000)